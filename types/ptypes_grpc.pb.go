// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: types/ptypes.proto

package types

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GeneratorClient is the client API for Generator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GeneratorClient interface {
	GenerateWinningNumbers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*WinningNums, error)
}

type generatorClient struct {
	cc grpc.ClientConnInterface
}

func NewGeneratorClient(cc grpc.ClientConnInterface) GeneratorClient {
	return &generatorClient{cc}
}

func (c *generatorClient) GenerateWinningNumbers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*WinningNums, error) {
	out := new(WinningNums)
	err := c.cc.Invoke(ctx, "/Generator/GenerateWinningNumbers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GeneratorServer is the server API for Generator service.
// All implementations must embed UnimplementedGeneratorServer
// for forward compatibility
type GeneratorServer interface {
	GenerateWinningNumbers(context.Context, *Empty) (*WinningNums, error)
	mustEmbedUnimplementedGeneratorServer()
}

// UnimplementedGeneratorServer must be embedded to have forward compatible implementations.
type UnimplementedGeneratorServer struct {
}

func (UnimplementedGeneratorServer) GenerateWinningNumbers(context.Context, *Empty) (*WinningNums, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateWinningNumbers not implemented")
}
func (UnimplementedGeneratorServer) mustEmbedUnimplementedGeneratorServer() {}

// UnsafeGeneratorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GeneratorServer will
// result in compilation errors.
type UnsafeGeneratorServer interface {
	mustEmbedUnimplementedGeneratorServer()
}

func RegisterGeneratorServer(s grpc.ServiceRegistrar, srv GeneratorServer) {
	s.RegisterService(&Generator_ServiceDesc, srv)
}

func _Generator_GenerateWinningNumbers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeneratorServer).GenerateWinningNumbers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Generator/GenerateWinningNumbers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeneratorServer).GenerateWinningNumbers(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Generator_ServiceDesc is the grpc.ServiceDesc for Generator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Generator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Generator",
	HandlerType: (*GeneratorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateWinningNumbers",
			Handler:    _Generator_GenerateWinningNumbers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "types/ptypes.proto",
}

// ReceiverClient is the client API for Receiver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReceiverClient interface {
	GetTicketByHash(ctx context.Context, in *TicketHashRequest, opts ...grpc.CallOption) (*TicketTransport, error)
	NextDrawDate(ctx context.Context, in *NextDateRequest, opts ...grpc.CallOption) (*NextDate, error)
	CreateTicket(ctx context.Context, in *UserNumbersTransport, opts ...grpc.CallOption) (*TicketTransport, error)
}

type receiverClient struct {
	cc grpc.ClientConnInterface
}

func NewReceiverClient(cc grpc.ClientConnInterface) ReceiverClient {
	return &receiverClient{cc}
}

func (c *receiverClient) GetTicketByHash(ctx context.Context, in *TicketHashRequest, opts ...grpc.CallOption) (*TicketTransport, error) {
	out := new(TicketTransport)
	err := c.cc.Invoke(ctx, "/Receiver/GetTicketByHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receiverClient) NextDrawDate(ctx context.Context, in *NextDateRequest, opts ...grpc.CallOption) (*NextDate, error) {
	out := new(NextDate)
	err := c.cc.Invoke(ctx, "/Receiver/NextDrawDate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receiverClient) CreateTicket(ctx context.Context, in *UserNumbersTransport, opts ...grpc.CallOption) (*TicketTransport, error) {
	out := new(TicketTransport)
	err := c.cc.Invoke(ctx, "/Receiver/CreateTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReceiverServer is the server API for Receiver service.
// All implementations must embed UnimplementedReceiverServer
// for forward compatibility
type ReceiverServer interface {
	GetTicketByHash(context.Context, *TicketHashRequest) (*TicketTransport, error)
	NextDrawDate(context.Context, *NextDateRequest) (*NextDate, error)
	CreateTicket(context.Context, *UserNumbersTransport) (*TicketTransport, error)
	mustEmbedUnimplementedReceiverServer()
}

// UnimplementedReceiverServer must be embedded to have forward compatible implementations.
type UnimplementedReceiverServer struct {
}

func (UnimplementedReceiverServer) GetTicketByHash(context.Context, *TicketHashRequest) (*TicketTransport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTicketByHash not implemented")
}
func (UnimplementedReceiverServer) NextDrawDate(context.Context, *NextDateRequest) (*NextDate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NextDrawDate not implemented")
}
func (UnimplementedReceiverServer) CreateTicket(context.Context, *UserNumbersTransport) (*TicketTransport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTicket not implemented")
}
func (UnimplementedReceiverServer) mustEmbedUnimplementedReceiverServer() {}

// UnsafeReceiverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReceiverServer will
// result in compilation errors.
type UnsafeReceiverServer interface {
	mustEmbedUnimplementedReceiverServer()
}

func RegisterReceiverServer(s grpc.ServiceRegistrar, srv ReceiverServer) {
	s.RegisterService(&Receiver_ServiceDesc, srv)
}

func _Receiver_GetTicketByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TicketHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiverServer).GetTicketByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Receiver/GetTicketByHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiverServer).GetTicketByHash(ctx, req.(*TicketHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Receiver_NextDrawDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NextDateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiverServer).NextDrawDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Receiver/NextDrawDate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiverServer).NextDrawDate(ctx, req.(*NextDateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Receiver_CreateTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserNumbersTransport)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiverServer).CreateTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Receiver/CreateTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiverServer).CreateTicket(ctx, req.(*UserNumbersTransport))
	}
	return interceptor(ctx, in, info, handler)
}

// Receiver_ServiceDesc is the grpc.ServiceDesc for Receiver service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Receiver_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Receiver",
	HandlerType: (*ReceiverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTicketByHash",
			Handler:    _Receiver_GetTicketByHash_Handler,
		},
		{
			MethodName: "NextDrawDate",
			Handler:    _Receiver_NextDrawDate_Handler,
		},
		{
			MethodName: "CreateTicket",
			Handler:    _Receiver_CreateTicket_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "types/ptypes.proto",
}

// CheckerClient is the client API for Checker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CheckerClient interface {
	CheckTicket(ctx context.Context, in *TicketTransport, opts ...grpc.CallOption) (*ResultResp, error)
}

type checkerClient struct {
	cc grpc.ClientConnInterface
}

func NewCheckerClient(cc grpc.ClientConnInterface) CheckerClient {
	return &checkerClient{cc}
}

func (c *checkerClient) CheckTicket(ctx context.Context, in *TicketTransport, opts ...grpc.CallOption) (*ResultResp, error) {
	out := new(ResultResp)
	err := c.cc.Invoke(ctx, "/Checker/CheckTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CheckerServer is the server API for Checker service.
// All implementations must embed UnimplementedCheckerServer
// for forward compatibility
type CheckerServer interface {
	CheckTicket(context.Context, *TicketTransport) (*ResultResp, error)
	mustEmbedUnimplementedCheckerServer()
}

// UnimplementedCheckerServer must be embedded to have forward compatible implementations.
type UnimplementedCheckerServer struct {
}

func (UnimplementedCheckerServer) CheckTicket(context.Context, *TicketTransport) (*ResultResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckTicket not implemented")
}
func (UnimplementedCheckerServer) mustEmbedUnimplementedCheckerServer() {}

// UnsafeCheckerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CheckerServer will
// result in compilation errors.
type UnsafeCheckerServer interface {
	mustEmbedUnimplementedCheckerServer()
}

func RegisterCheckerServer(s grpc.ServiceRegistrar, srv CheckerServer) {
	s.RegisterService(&Checker_ServiceDesc, srv)
}

func _Checker_CheckTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TicketTransport)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckerServer).CheckTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Checker/CheckTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckerServer).CheckTicket(ctx, req.(*TicketTransport))
	}
	return interceptor(ctx, in, info, handler)
}

// Checker_ServiceDesc is the grpc.ServiceDesc for Checker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Checker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Checker",
	HandlerType: (*CheckerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckTicket",
			Handler:    _Checker_CheckTicket_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "types/ptypes.proto",
}

// AnnoucerClient is the client API for Annoucer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnnoucerClient interface {
	CheckResult(ctx context.Context, in *TicketHashRequest, opts ...grpc.CallOption) (*ResultResp, error)
}

type annoucerClient struct {
	cc grpc.ClientConnInterface
}

func NewAnnoucerClient(cc grpc.ClientConnInterface) AnnoucerClient {
	return &annoucerClient{cc}
}

func (c *annoucerClient) CheckResult(ctx context.Context, in *TicketHashRequest, opts ...grpc.CallOption) (*ResultResp, error) {
	out := new(ResultResp)
	err := c.cc.Invoke(ctx, "/Annoucer/CheckResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnnoucerServer is the server API for Annoucer service.
// All implementations must embed UnimplementedAnnoucerServer
// for forward compatibility
type AnnoucerServer interface {
	CheckResult(context.Context, *TicketHashRequest) (*ResultResp, error)
	mustEmbedUnimplementedAnnoucerServer()
}

// UnimplementedAnnoucerServer must be embedded to have forward compatible implementations.
type UnimplementedAnnoucerServer struct {
}

func (UnimplementedAnnoucerServer) CheckResult(context.Context, *TicketHashRequest) (*ResultResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckResult not implemented")
}
func (UnimplementedAnnoucerServer) mustEmbedUnimplementedAnnoucerServer() {}

// UnsafeAnnoucerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnnoucerServer will
// result in compilation errors.
type UnsafeAnnoucerServer interface {
	mustEmbedUnimplementedAnnoucerServer()
}

func RegisterAnnoucerServer(s grpc.ServiceRegistrar, srv AnnoucerServer) {
	s.RegisterService(&Annoucer_ServiceDesc, srv)
}

func _Annoucer_CheckResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TicketHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnnoucerServer).CheckResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Annoucer/CheckResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnnoucerServer).CheckResult(ctx, req.(*TicketHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Annoucer_ServiceDesc is the grpc.ServiceDesc for Annoucer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Annoucer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Annoucer",
	HandlerType: (*AnnoucerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckResult",
			Handler:    _Annoucer_CheckResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "types/ptypes.proto",
}
